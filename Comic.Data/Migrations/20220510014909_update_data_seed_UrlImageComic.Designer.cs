// <auto-generated />
using System;
using Comic.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Comic.Data.Migrations
{
    [DbContext(typeof(ComicDbContext))]
    [Migration("20220510014909_update_data_seed_UrlImageComic")]
    partial class update_data_seed_UrlImageComic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Comic.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            ConcurrencyStamp = "676e9dc4-540d-4d36-b43d-0845e1f7d224",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c489f858-aabd-4264-96c1-5cdca251d871"),
                            ConcurrencyStamp = "98d59657-b52a-4223-b1b7-f7a48ff6dbce",
                            Description = "Staff role",
                            Name = "staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            ConcurrencyStamp = "06f764cc-6918-48fe-bdbd-af9048edeb02",
                            Description = "Customer role",
                            Name = "customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlImageUser")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "026ef0df-5f0b-43bd-8c9a-636bcd3fbcff",
                            Dob = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranquangbhdz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tran",
                            GenderId = 1,
                            IsActive = true,
                            LastName = "Quang",
                            LockoutEnabled = false,
                            MoreInfo = "Chùm",
                            NormalizedEmail = "tranquangbhdz@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEHPuMzItDI7RuFG+NmXbbnGmIUPiROQ/ajV4pJ28wW0bcctA2b+dnjwAkwB8lq3ABQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlImageUser = "https://64.media.tumblr.com/f3685609f6f9e0f15b70b740380fe0db/85dff69cc547be63-1d/s640x960/a0fa84e4ec96b338ec45f925baccc9619131013c.jpg",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifferentName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAuthor")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7977),
                            DifferentName = "Trương Uy",
                            IsActive = true,
                            NameAuthor = "Đường Gia Tam Thiếu",
                            SeoAlias = "duong-gia-tam-thieu"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7981),
                            DifferentName = "Lý Hổ",
                            IsActive = true,
                            NameAuthor = "Thiên Tằm Thổ Đậu",
                            SeoAlias = "thien-tam-tho-dau"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7983),
                            DifferentName = "",
                            IsActive = true,
                            NameAuthor = "Ogawa Makoto",
                            SeoAlias = "ogawa-makoto"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7984),
                            DifferentName = "",
                            IsActive = true,
                            NameAuthor = "Black Ajin",
                            SeoAlias = "black-ajin"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7985),
                            DifferentName = "",
                            IsActive = true,
                            NameAuthor = "Đang cập nhật",
                            SeoAlias = "dang-cap-nhat"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.AuthorInDetailComic", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("DetailComicId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "DetailComicId");

                    b.HasIndex("DetailComicId");

                    b.ToTable("AuthorInDetailComics", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            DetailComicId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            DetailComicId = 2
                        },
                        new
                        {
                            AuthorId = 3,
                            DetailComicId = 3
                        },
                        new
                        {
                            AuthorId = 4,
                            DetailComicId = 4
                        },
                        new
                        {
                            AuthorId = 5,
                            DetailComicId = 5
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("UrlImageCategory")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7785),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/action.svg"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7816),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/comedy.svg"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7817),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/comedy.svg"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7818),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/adventure.svg"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7819),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/romance.svg"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7821),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/horror.svg"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7822),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/mature.svg"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7823),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/comedy.svg"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7824),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/manhua.svg"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7825),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/comedy.svg"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7826),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/comedy.svg"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(7827),
                            IsActive = true,
                            IsShowHome = true,
                            UrlImageCategory = "https://inkr.com/images/explore/comedy.svg"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.CategoryInDetailComic", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DetailComicId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "DetailComicId");

                    b.HasIndex("DetailComicId");

                    b.ToTable("CategoryInDetailComics", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            DetailComicId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            DetailComicId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            DetailComicId = 2
                        },
                        new
                        {
                            CategoryId = 12,
                            DetailComicId = 3
                        },
                        new
                        {
                            CategoryId = 2,
                            DetailComicId = 3
                        },
                        new
                        {
                            CategoryId = 8,
                            DetailComicId = 4
                        },
                        new
                        {
                            CategoryId = 1,
                            DetailComicId = 4
                        },
                        new
                        {
                            CategoryId = 12,
                            DetailComicId = 4
                        },
                        new
                        {
                            CategoryId = 1,
                            DetailComicId = 5
                        },
                        new
                        {
                            CategoryId = 8,
                            DetailComicId = 5
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.ChapterComic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameChapter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("ChapterComics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComicId = 1,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8255),
                            IsActive = true,
                            NameChapter = "Chapter 1",
                            SeoAlias = "/dau-la-dai-luc-trung-sinh-duong-tam-119313/chapter-1-284272",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            ComicId = 1,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8258),
                            IsActive = true,
                            NameChapter = "Chapter 2",
                            SeoAlias = "/dau-la-dai-luc-trung-sinh-duong-tam-119313/chapter-2-524817",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            ComicId = 1,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8261),
                            IsActive = true,
                            NameChapter = "Chapter 3",
                            SeoAlias = "/dau-la-dai-luc-trung-sinh-duong-tam-119313/chapter-3-846113",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 4,
                            ComicId = 1,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8262),
                            IsActive = true,
                            NameChapter = "Chapter 4",
                            SeoAlias = "/dau-la-dai-luc-trung-sinh-duong-tam-119313/chapter-4-247242",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 5,
                            ComicId = 2,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8263),
                            IsActive = true,
                            NameChapter = "Chapter 1",
                            SeoAlias = "/dau-pha-thuong-khung-123813/chapter-1-119211",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 6,
                            ComicId = 2,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8267),
                            IsActive = true,
                            NameChapter = "Chapter 1.5",
                            SeoAlias = "/dau-pha-thuong-khung-123813/chapter-1.5-249671",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 7,
                            ComicId = 2,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8268),
                            IsActive = true,
                            NameChapter = "Chapter 2",
                            SeoAlias = "/dau-pha-thuong-khung-123813/chapter-2-359611",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 8,
                            ComicId = 3,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8269),
                            IsActive = true,
                            NameChapter = "Chapter 1",
                            SeoAlias = "/khong-minh-thich-tiec-tung-813713/chapter-1-204813",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 9,
                            ComicId = 4,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8270),
                            IsActive = true,
                            NameChapter = "Chapter 1",
                            SeoAlias = "/anh-hung-tro-lai-590960/chapter-1-947274",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.ComicStrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifferentNameComic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("IdNewChapter")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameComic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UrlCoverImageComic")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Comics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8023),
                            DifferentNameComic = "",
                            IsActive = true,
                            NameComic = "Đấu La Đại Lục Ⅴ Trùng Sinh Đường Tam",
                            UrlCoverImageComic = "https://static.cdnno.com/poster/dau-la-dai-luc-trung-sinh-duong-tam/300.jpg?1621052117",
                            ViewCount = 11111
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8025),
                            DifferentNameComic = "",
                            IsActive = true,
                            NameComic = "Đấu Phá Thương Khung",
                            UrlCoverImageComic = "https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png",
                            ViewCount = 312
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8028),
                            DifferentNameComic = "PARIPI KOUMEI; パリピ孔明",
                            IsActive = true,
                            NameComic = "Khổng Minh Thích Tiệc Tùng",
                            UrlCoverImageComic = "https://s199.imacdn.com/tt24/2022/04/26/7320277562288939_9aa537180a57276c_4220616509574003828291.jpg",
                            ViewCount = 5
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8037),
                            DifferentNameComic = "Anh Hùng Trở Về; Anh Hùng Hồi Quy; The Hero Returns",
                            IsActive = true,
                            NameComic = "Anh Hùng Trở Lại",
                            UrlCoverImageComic = "https://i3.wp.com/nhattruyenz.com/images/anh-hung-tro-lai.jpg",
                            ViewCount = 110
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8049),
                            DifferentNameComic = "",
                            IsActive = true,
                            NameComic = "Streamer Pháp Sư",
                            UrlCoverImageComic = "https://i3.wp.com/nhattruyenz.com/images/streamer-phap-su.jpg",
                            ViewCount = 880
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("DetailCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            NameCategory = "Action",
                            SeoAlias = "/action",
                            SeoDescription = "Thể loại hành động",
                            SeoTitle = "Hành Động"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            NameCategory = "Slice of Life",
                            SeoAlias = "/slice-of-life",
                            SeoDescription = "Thể loại nói về cuộc sống đời thường",
                            SeoTitle = "Cuộc Sống Đời Thường"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            NameCategory = "Harem",
                            SeoAlias = "/harem",
                            SeoDescription = "Thể loại truyện tình cảm, lãng mạn mà trong đó, nhiều nhân vật nữ thích một nam nhân vật chính",
                            SeoTitle = "Tình Cảm, Lãng Mạn, Nhiều Nữ Thích Một Nam"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            NameCategory = "Adventure",
                            SeoAlias = "/adventure",
                            SeoDescription = "Thể loại phiêu lưu, mạo hiểm, thường là hành trình của các nhân vật"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            NameCategory = "Romance",
                            SeoAlias = "/romance",
                            SeoDescription = "Thường là những câu chuyện về tình yêu, tình cảm lãng mạn. Ớ đây chúng ta sẽ lấy ví dụ như tình yêu giữa một người con trai và con gái, bên cạnh đó đặc điểm thể loại này là kích thích trí tưởng tượng của bạn về tình yêu"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            NameCategory = "Horror",
                            SeoAlias = "/horror",
                            SeoDescription = "Horror là: rùng rợn, nghe cái tên là bạn đã hiểu thể loại này có nội dung thế nào. Nó làm cho bạn kinh hãi, khiếp sợ, ghê tởm, run rẩy, có thể gây sock - một thể loại không dành cho người yếu tim"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            NameCategory = "Mature",
                            SeoAlias = "/mature",
                            SeoDescription = "Thể loại dành cho lứa tuổi 17+ bao gồm các pha bạo lực, máu me, chém giết, tình dục ở mức độ vừa"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            NameCategory = "Manhwa",
                            SeoAlias = "/manhwa",
                            SeoDescription = "Truyện tranh Hàn Quốc, đọc từ trái sang phải"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            NameCategory = "Manhua",
                            SeoAlias = "/manhua",
                            SeoDescription = "Truyện tranh của Trung Quốc"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            NameCategory = "Ecchi",
                            SeoAlias = "/ecchi",
                            SeoDescription = "Thường có những tình huống nhạy cảm nhằm lôi cuốn người xem"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 11,
                            NameCategory = "Drama",
                            SeoAlias = "/drama",
                            SeoDescription = "Thể loại mang đến cho người xem những cảm xúc khác nhau: buồn bã, căng thẳng thậm chí là bi phẫn"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 12,
                            NameCategory = "Isekai",
                            SeoAlias = "/isekai",
                            SeoDescription = "Thể loại này là những câu chuyện về người ở một thế giới này xuyên đến một thế giới khác, có thể là thế giới mang phong cách trung cổ với kiếm sĩ và ma thuật, hay thế giới trong game, hoặc có thể là bạn chết ở nơi này và được chuyển sinh đến nơi khác"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailComic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<int>("CountFollow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CountRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3800)
                        .HasColumnType("nvarchar(3800)");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("StatusId");

                    b.ToTable("DetailComics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComicId = 1,
                            CountFollow = 0,
                            CountRating = 0,
                            Description = "Một đời Thần Vương trùng sinh tại Pháp Lam thế giới thần kỳ, hắn kinh ngạc phát hiện, nơi này hết thảy đều là như vậy kỳ diệu, hắn càng là vận khí tuyệt hảo tìm được thê tử chuyển thế thân. Thế nhưng là, nàng không có trí nhớ của kiếp trước, gặp nhau lần nữa đã là người qua đường.",
                            Rating = 0.0,
                            SeoAlias = "/dau-la-dai-luc-trung-sinh-duong-tam-119313",
                            SeoDescription = "Đấu La Đại Lục Ⅴ Trùng Sinh Đường Tam Một Phần Mới Của Tác Giả Đường Gia Tam Thiếu",
                            SeoTitle = "Đấu La Đại Lục Ⅴ Trùng Sinh Đường Tam",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComicId = 2,
                            CountFollow = 0,
                            CountRating = 0,
                            Description = "Đây là một thế giới thuộc về Đấu Khí, không hề có ma pháp hoa tiếu diễm lệ, chỉ có đấu khí cương mãnh phồn thịnh ! Tưởng tượng thế giới đó sẽ phát triển ra sao ? mời các bạn xem Đấu Phá Thương Khung!",
                            Rating = 0.0,
                            SeoAlias = "/dau-pha-thuong-khung-123813",
                            SeoDescription = "Đấu Phá Thương Khung Một Trong Những Bộ Truyện Có Lượt Xem Nhiều Nhất",
                            SeoTitle = "Đấu Phá Thương Khung",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            ComicId = 3,
                            CountFollow = 0,
                            CountRating = 0,
                            Description = "Bậc thầy quân sự nổi tiếng - Gia Cát Lượng Khổng Minh - người đã chết trong trận Ngũ Trượng Nguyên trở lại với cơ thể khi còn trẻ và tái sinh về Nhật Bản hiện đại. Được những người mê tiệc tùng ở Shibuya dẫn đi, Khổng Minh đã tới hộp đêm vang vọng tiếng nhạc EDM. Ở đó Khổng Minh đã gặp Tsukimi Eiko, người có mục tiêu trở thành ca sĩ, chính là người đã vén lên tấm ván cuộc sống thứ hai của ông. Người sống vì thiên hạ thái bình ở thời Tam Quốc như ông sẽ sống gì điều gì đây...!?",
                            Rating = 0.0,
                            SeoAlias = "/khong-minh-thich-tiec-tung-813713",
                            SeoDescription = "Gia Cát Lượng Khổng Minh - người đã chết trong trận Ngũ Trượng Nguyên trở lại với cơ thể khi còn trẻ và tái sinh về Nhật Bản hiện đại.",
                            SeoTitle = "Gia Cát Lượng Khổng Minh",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            ComicId = 4,
                            CountFollow = 0,
                            CountRating = 0,
                            Description = "Đệ nhất anh hùng của nhân loại, Kim Sung In.<br>Anh ấy bỏ mặc mọi thứ để quyết tâm lên đường chiến đấu  nhưng… Anh ấy vẫn không thể ngăn chặn sự hủy diệt của thế giới.<br>Tuy nhiên câu truyện huyền thoại của anh ấy chỉ mới bắt đầu khi anh ấy quay trở lại quá khứ vào 20 năm trước.",
                            Rating = 0.0,
                            SeoAlias = "/anh-hung-tro-lai-590960",
                            SeoDescription = "Câu truyện huyền thoại của anh ấy chỉ mới bắt đầu khi anh ấy quay trở lại quá khứ vào 20 năm trước.",
                            SeoTitle = "Anh Hùng Trở Về",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            ComicId = 5,
                            CountFollow = 0,
                            CountRating = 0,
                            Description = "Truyện tranh Streamer Pháp Sư được cập nhật nhanh và đầy đủ nhất tại HikiComic. Bạn đọc đừng quên để lại bình luận và chia sẻ, ủng hộ HikiComic ra các chương mới nhất của truyện Streamer Pháp Sư.",
                            Rating = 0.0,
                            SeoAlias = "/streamer-phap-su-576390",
                            SeoDescription = "STREAMER PHÁP SƯ",
                            SeoTitle = "STREAMER PHÁP SƯ",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameGender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameGender = "Male"
                        },
                        new
                        {
                            Id = 2,
                            NameGender = "Female"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.HistoryReadComicOfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRead")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ComicId");

                    b.ToTable("HistoryReadComicOfUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            ChapterId = 1,
                            ComicId = 1,
                            DateRead = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8382)
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            ChapterId = 6,
                            ComicId = 2,
                            DateRead = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8384)
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.ListOfComicsUsersFollow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFollow")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ComicId");

                    b.ToTable("ListOfComicsUsersFollows", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            ComicId = 1,
                            DateFollow = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8339)
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            ComicId = 2,
                            DateFollow = new DateTime(2022, 5, 10, 8, 49, 7, 965, DateTimeKind.Local).AddTicks(8346)
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameStatus = "Đang tiến hành"
                        },
                        new
                        {
                            Id = 2,
                            NameStatus = "Hoàn thành"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.UrlImageComic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChapterComicId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UrlImageChapterComic")
                        .IsRequired()
                        .HasMaxLength(7800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7800)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterComicId");

                    b.ToTable("UrlImageComics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterComicId = 1,
                            IsActive = true,
                            UrlImageChapterComic = "|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg"
                        },
                        new
                        {
                            Id = 2,
                            ChapterComicId = 2,
                            IsActive = true,
                            UrlImageChapterComic = "|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg"
                        },
                        new
                        {
                            Id = 3,
                            ChapterComicId = 3,
                            IsActive = true,
                            UrlImageChapterComic = "|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg"
                        },
                        new
                        {
                            Id = 4,
                            ChapterComicId = 4,
                            IsActive = true,
                            UrlImageChapterComic = "|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg|https://salt.tikicdn.com/ts/product/f6/b5/b7/6acaf61c8357d23e223b2fe5b9d065f0.jpg"
                        },
                        new
                        {
                            Id = 5,
                            ChapterComicId = 5,
                            IsActive = true,
                            UrlImageChapterComic = "|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png"
                        },
                        new
                        {
                            Id = 6,
                            ChapterComicId = 5,
                            IsActive = true,
                            UrlImageChapterComic = "|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png"
                        },
                        new
                        {
                            Id = 7,
                            ChapterComicId = 5,
                            IsActive = true,
                            UrlImageChapterComic = "|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png|https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("Comic.Data.Entities.AppUser", b =>
                {
                    b.HasOne("Comic.Data.Entities.Gender", "Gender")
                        .WithMany("AppUsers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Comic.Data.Entities.AuthorInDetailComic", b =>
                {
                    b.HasOne("Comic.Data.Entities.Author", "Author")
                        .WithMany("AuthorInDetailComics")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.DetailComic", "DetailComic")
                        .WithMany("AuthorInDetailComics")
                        .HasForeignKey("DetailComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("DetailComic");
                });

            modelBuilder.Entity("Comic.Data.Entities.CategoryInDetailComic", b =>
                {
                    b.HasOne("Comic.Data.Entities.Category", "Category")
                        .WithMany("CategoryInDetailComics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.DetailComic", "DetailComic")
                        .WithMany("CategoryInDetailComics")
                        .HasForeignKey("DetailComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DetailComic");
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailCategory", b =>
                {
                    b.HasOne("Comic.Data.Entities.Category", "Category")
                        .WithMany("DetailCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailComic", b =>
                {
                    b.HasOne("Comic.Data.Entities.ComicStrip", "ComicStrip")
                        .WithMany("DetailComics")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.Status", "Status")
                        .WithMany("DetailComics")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicStrip");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Comic.Data.Entities.HistoryReadComicOfUser", b =>
                {
                    b.HasOne("Comic.Data.Entities.AppUser", "AppUser")
                        .WithMany("HistoryReadComicOfUsers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.ChapterComic", "ChapterComic")
                        .WithMany("HistoryReadComicOfUsers")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.ComicStrip", "ComicStrip")
                        .WithMany("HistoryReadComicOfUsers")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ChapterComic");

                    b.Navigation("ComicStrip");
                });

            modelBuilder.Entity("Comic.Data.Entities.ListOfComicsUsersFollow", b =>
                {
                    b.HasOne("Comic.Data.Entities.AppUser", "AppUser")
                        .WithMany("ListOfComicsUsersFollows")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.ComicStrip", "ComicStrip")
                        .WithMany("ListOfComicsUsersFollows")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ComicStrip");
                });

            modelBuilder.Entity("Comic.Data.Entities.UrlImageComic", b =>
                {
                    b.HasOne("Comic.Data.Entities.ChapterComic", "ChapterComic")
                        .WithMany("UrlImageComics")
                        .HasForeignKey("ChapterComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChapterComic");
                });

            modelBuilder.Entity("Comic.Data.Entities.AppUser", b =>
                {
                    b.Navigation("HistoryReadComicOfUsers");

                    b.Navigation("ListOfComicsUsersFollows");
                });

            modelBuilder.Entity("Comic.Data.Entities.Author", b =>
                {
                    b.Navigation("AuthorInDetailComics");
                });

            modelBuilder.Entity("Comic.Data.Entities.Category", b =>
                {
                    b.Navigation("CategoryInDetailComics");

                    b.Navigation("DetailCategories");
                });

            modelBuilder.Entity("Comic.Data.Entities.ChapterComic", b =>
                {
                    b.Navigation("HistoryReadComicOfUsers");

                    b.Navigation("UrlImageComics");
                });

            modelBuilder.Entity("Comic.Data.Entities.ComicStrip", b =>
                {
                    b.Navigation("DetailComics");

                    b.Navigation("HistoryReadComicOfUsers");

                    b.Navigation("ListOfComicsUsersFollows");
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailComic", b =>
                {
                    b.Navigation("AuthorInDetailComics");

                    b.Navigation("CategoryInDetailComics");
                });

            modelBuilder.Entity("Comic.Data.Entities.Gender", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Comic.Data.Entities.Status", b =>
                {
                    b.Navigation("DetailComics");
                });
#pragma warning restore 612, 618
        }
    }
}
