// <auto-generated />
using System;
using Comic.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Comic.Data.Migrations
{
    [DbContext(typeof(ComicDbContext))]
    partial class ComicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Comic.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            ConcurrencyStamp = "70a20af4-d75b-4d38-bf84-8d83e5aca7c7",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c489f858-aabd-4264-96c1-5cdca251d871"),
                            ConcurrencyStamp = "6fd923a6-0960-4d16-8d4b-54ea0674dd2b",
                            Description = "Staff role",
                            Name = "staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            ConcurrencyStamp = "442ab809-7685-4d16-b188-08978316b277",
                            Description = "Customer role",
                            Name = "customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlImageUser")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61f303b0-c3c3-4d19-a640-58b247c909c8",
                            Dob = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranquangbhdz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tran",
                            GenderId = 1,
                            IsActive = true,
                            LastName = "Quang",
                            LockoutEnabled = false,
                            MoreInfo = "Chùm",
                            NormalizedEmail = "tranquangbhdz@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEHGHOvIpnsPF8ItHKF5BQWPGp0sEWswy9jQCVEkZlrNbNBIhQy1uzE4tSZ3wnHNYbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlImageUser = "https://64.media.tumblr.com/f3685609f6f9e0f15b70b740380fe0db/85dff69cc547be63-1d/s640x960/a0fa84e4ec96b338ec45f925baccc9619131013c.jpg",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifferentName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAuthor")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 4, 29, 18, 21, 47, 726, DateTimeKind.Local).AddTicks(3487),
                            DifferentName = "Trương Uy",
                            IsActive = true,
                            NameAuthor = "Đường Gia Tam Thiếu",
                            SeoAlias = "duong-gia-tam-thieu"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 4, 29, 18, 21, 47, 726, DateTimeKind.Local).AddTicks(3489),
                            DifferentName = "Lý Hổ",
                            IsActive = true,
                            NameAuthor = "Thiên Tằm Thổ Đậu",
                            SeoAlias = "thien-tam-tho-dau"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.AuthorInDetailComic", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("DetailComicId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "DetailComicId");

                    b.HasIndex("DetailComicId");

                    b.ToTable("AuthorInDetailComics", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            DetailComicId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            DetailComicId = 2
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 4, 29, 18, 21, 47, 726, DateTimeKind.Local).AddTicks(3426),
                            IsActive = true,
                            IsShowHome = true
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 4, 29, 18, 21, 47, 726, DateTimeKind.Local).AddTicks(3436),
                            IsActive = true,
                            IsShowHome = true
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 4, 29, 18, 21, 47, 726, DateTimeKind.Local).AddTicks(3437),
                            IsActive = true,
                            IsShowHome = true
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.CategoryInDetailComic", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DetailComicId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "DetailComicId");

                    b.HasIndex("DetailComicId");

                    b.ToTable("CategoryInDetailComics", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            DetailComicId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            DetailComicId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            DetailComicId = 2
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.ChapterComic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameChapter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("ChapterComics", (string)null);
                });

            modelBuilder.Entity("Comic.Data.Entities.ComicStrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifferentNameComic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("IdNewChapter")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameComic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UrlCoverImageComic")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Comics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 4, 29, 18, 21, 47, 726, DateTimeKind.Local).AddTicks(3504),
                            DifferentNameComic = "",
                            IsActive = true,
                            NameComic = "Đấu La Đại Lục Ⅴ Trùng Sinh Đường Tam",
                            UrlCoverImageComic = "https://static.cdnno.com/poster/dau-la-dai-luc-trung-sinh-duong-tam/300.jpg?1621052117",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 4, 29, 18, 21, 47, 726, DateTimeKind.Local).AddTicks(3507),
                            DifferentNameComic = "",
                            IsActive = true,
                            NameComic = "Đấu Phá Thương Khung",
                            UrlCoverImageComic = "https://vcomi.co/app/manga/uploads/covers/7de8206eb99958c13cf6f55ba7efbe52.png",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("DetailCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            NameCategory = "Action",
                            SeoAlias = "action",
                            SeoDescription = "Thể loại hành động",
                            SeoTitle = "Hành Động"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            NameCategory = "Slice of Life",
                            SeoAlias = "slice-of-life",
                            SeoDescription = "Thể loại nói về cuộc sống đời thường",
                            SeoTitle = "Cuộc Sống Đời Thường"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            NameCategory = "Harem",
                            SeoAlias = "harem",
                            SeoDescription = "Thể loại truyện tình cảm, lãng mạn mà trong đó, nhiều nhân vật nữ thích một nam nhân vật chính",
                            SeoTitle = "Tình Cảm, Lãng Mạn, Nhiều Nữ Thích Một Nam"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailComic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3800)
                        .HasColumnType("nvarchar(3800)");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("StatusId");

                    b.ToTable("DetailComics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComicId = 1,
                            Description = "Một đời Thần Vương trùng sinh tại Pháp Lam thế giới thần kỳ, hắn kinh ngạc phát hiện, nơi này hết thảy đều là như vậy kỳ diệu, hắn càng là vận khí tuyệt hảo tìm được thê tử chuyển thế thân. Thế nhưng là, nàng không có trí nhớ của kiếp trước, gặp nhau lần nữa đã là người qua đường.",
                            Rating = 0.0,
                            SeoAlias = "dau-la-dai-luc-trung-sinh-duong-tam-119313",
                            SeoDescription = "Đấu La Đại Lục Ⅴ Trùng Sinh Đường Tam Một Phần Mới Của Tác Giả Đường Gia Tam Thiếu",
                            SeoTitle = "Đấu La Đại Lục Ⅴ Trùng Sinh Đường Tam",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComicId = 2,
                            Description = "Đây là một thế giới thuộc về Đấu Khí, không hề có ma pháp hoa tiếu diễm lệ, chỉ có đấu khí cương mãnh phồn thịnh ! Tưởng tượng thế giới đó sẽ phát triển ra sao ? mời các bạn xem Đấu Phá Thương Khung!",
                            Rating = 0.0,
                            SeoAlias = "dau-pha-thuong-khung-123813",
                            SeoDescription = "Đấu Phá Thương Khung Một Trong Những Bộ Truyện Có Lượt Xem Nhiều Nhất",
                            SeoTitle = "Đấu Phá Thương Khung",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameGender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameGender = "Male"
                        },
                        new
                        {
                            Id = 2,
                            NameGender = "Female"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.HistoryReadComicOfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRead")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ComicId");

                    b.ToTable("HistoryReadComicOfUsers", (string)null);
                });

            modelBuilder.Entity("Comic.Data.Entities.ListOfComicsUsersFollow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFollow")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ComicId");

                    b.ToTable("ListOfComicsUsersFollows", (string)null);
                });

            modelBuilder.Entity("Comic.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameStatus = "Còn sử dụng"
                        },
                        new
                        {
                            Id = 2,
                            NameStatus = "Hết sử dụng"
                        });
                });

            modelBuilder.Entity("Comic.Data.Entities.UrlImageComic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChapterComicId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UrlImageChapterComic")
                        .IsRequired()
                        .HasMaxLength(7800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7800)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterComicId");

                    b.ToTable("UrlImageComics", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("Comic.Data.Entities.AppUser", b =>
                {
                    b.HasOne("Comic.Data.Entities.Gender", "Gender")
                        .WithMany("AppUsers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Comic.Data.Entities.AuthorInDetailComic", b =>
                {
                    b.HasOne("Comic.Data.Entities.Author", "Author")
                        .WithMany("AuthorInDetailComics")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.DetailComic", "DetailComic")
                        .WithMany("AuthorInDetailComics")
                        .HasForeignKey("DetailComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("DetailComic");
                });

            modelBuilder.Entity("Comic.Data.Entities.CategoryInDetailComic", b =>
                {
                    b.HasOne("Comic.Data.Entities.Category", "Category")
                        .WithMany("CategoryInDetailComics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.DetailComic", "DetailComic")
                        .WithMany("CategoryInDetailComics")
                        .HasForeignKey("DetailComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DetailComic");
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailCategory", b =>
                {
                    b.HasOne("Comic.Data.Entities.Category", "Category")
                        .WithMany("DetailCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailComic", b =>
                {
                    b.HasOne("Comic.Data.Entities.ComicStrip", "ComicStrip")
                        .WithMany("DetailComics")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.Status", "Status")
                        .WithMany("DetailComics")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicStrip");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Comic.Data.Entities.HistoryReadComicOfUser", b =>
                {
                    b.HasOne("Comic.Data.Entities.AppUser", "AppUser")
                        .WithMany("HistoryReadComicOfUsers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.ComicStrip", "ComicStrip")
                        .WithMany("HistoryReadComicOfUsers")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ComicStrip");
                });

            modelBuilder.Entity("Comic.Data.Entities.ListOfComicsUsersFollow", b =>
                {
                    b.HasOne("Comic.Data.Entities.AppUser", "AppUser")
                        .WithMany("ListOfComicsUsersFollows")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.ChapterComic", "ChapterComic")
                        .WithMany("ListOfComicsUsersFollows")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comic.Data.Entities.ComicStrip", "ComicStrip")
                        .WithMany("ListOfComicsUsersFollows")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ChapterComic");

                    b.Navigation("ComicStrip");
                });

            modelBuilder.Entity("Comic.Data.Entities.UrlImageComic", b =>
                {
                    b.HasOne("Comic.Data.Entities.ChapterComic", "ChapterComic")
                        .WithMany("UrlImageComics")
                        .HasForeignKey("ChapterComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChapterComic");
                });

            modelBuilder.Entity("Comic.Data.Entities.AppUser", b =>
                {
                    b.Navigation("HistoryReadComicOfUsers");

                    b.Navigation("ListOfComicsUsersFollows");
                });

            modelBuilder.Entity("Comic.Data.Entities.Author", b =>
                {
                    b.Navigation("AuthorInDetailComics");
                });

            modelBuilder.Entity("Comic.Data.Entities.Category", b =>
                {
                    b.Navigation("CategoryInDetailComics");

                    b.Navigation("DetailCategories");
                });

            modelBuilder.Entity("Comic.Data.Entities.ChapterComic", b =>
                {
                    b.Navigation("ListOfComicsUsersFollows");

                    b.Navigation("UrlImageComics");
                });

            modelBuilder.Entity("Comic.Data.Entities.ComicStrip", b =>
                {
                    b.Navigation("DetailComics");

                    b.Navigation("HistoryReadComicOfUsers");

                    b.Navigation("ListOfComicsUsersFollows");
                });

            modelBuilder.Entity("Comic.Data.Entities.DetailComic", b =>
                {
                    b.Navigation("AuthorInDetailComics");

                    b.Navigation("CategoryInDetailComics");
                });

            modelBuilder.Entity("Comic.Data.Entities.Gender", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Comic.Data.Entities.Status", b =>
                {
                    b.Navigation("DetailComics");
                });
#pragma warning restore 612, 618
        }
    }
}
